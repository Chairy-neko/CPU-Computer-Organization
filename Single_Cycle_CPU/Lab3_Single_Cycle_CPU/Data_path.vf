////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Data_path.vf
// /___/   /\     Timestamp : 08/16/2020 09:37:00
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath C:/neko/lab3/ipcore_dir -intstyle ise -family kintex7 -verilog C:/neko/lab3/Data_path.vf -w C:/neko/lab3/Data_path.sch
//Design Name: Data_path
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module MUX2T1_5_MUSER_Data_path(I0, 
                                I1, 
                                s, 
                                o);

    input [4:0] I0;
    input [4:0] I1;
    input s;
   output [4:0] o;
   
   wire XLXN_2;
   wire XLXN_36;
   wire XLXN_37;
   wire XLXN_38;
   wire XLXN_39;
   wire XLXN_40;
   wire XLXN_41;
   wire XLXN_42;
   wire XLXN_43;
   wire XLXN_44;
   wire XLXN_45;
   
   INV  XLXI_1 (.I(s), 
               .O(XLXN_2));
   AND2  XLXI_2 (.I0(I0[0]), 
                .I1(XLXN_2), 
                .O(XLXN_36));
   AND2  XLXI_3 (.I0(I1[0]), 
                .I1(s), 
                .O(XLXN_37));
   AND2  XLXI_4 (.I0(I0[1]), 
                .I1(XLXN_2), 
                .O(XLXN_38));
   AND2  XLXI_5 (.I0(I1[1]), 
                .I1(s), 
                .O(XLXN_39));
   AND2  XLXI_6 (.I0(I0[2]), 
                .I1(XLXN_2), 
                .O(XLXN_40));
   AND2  XLXI_7 (.I0(I1[2]), 
                .I1(s), 
                .O(XLXN_41));
   AND2  XLXI_8 (.I0(I0[3]), 
                .I1(XLXN_2), 
                .O(XLXN_42));
   AND2  XLXI_9 (.I0(I1[3]), 
                .I1(s), 
                .O(XLXN_43));
   AND2  XLXI_10 (.I0(I0[4]), 
                 .I1(XLXN_2), 
                 .O(XLXN_44));
   AND2  XLXI_11 (.I0(I1[4]), 
                 .I1(s), 
                 .O(XLXN_45));
   OR2  XLXI_12 (.I0(XLXN_37), 
                .I1(XLXN_36), 
                .O(o[0]));
   OR2  XLXI_13 (.I0(XLXN_39), 
                .I1(XLXN_38), 
                .O(o[1]));
   OR2  XLXI_14 (.I0(XLXN_41), 
                .I1(XLXN_40), 
                .O(o[2]));
   OR2  XLXI_15 (.I0(XLXN_43), 
                .I1(XLXN_42), 
                .O(o[3]));
   OR2  XLXI_16 (.I0(XLXN_45), 
                .I1(XLXN_44), 
                .O(o[4]));
endmodule
`timescale 1ns / 1ps

module Data_path(ALUSrc_A, 
                 ALUSrc_B, 
                 ALU_Control, 
                 Branch, 
                 clk, 
                 DatatoReg, 
                 Data_in, 
                 inst_field, 
                 Jal, 
                 RegDst, 
                 RegWrite, 
                 rst, 
                 ALU_out, 
                 Data_out, 
                 overflow, 
                 PC_out, 
                 zero);

    input ALUSrc_A;
    input ALUSrc_B;
    input [2:0] ALU_Control;
    input [1:0] Branch;
    input clk;
    input [1:0] DatatoReg;
    input [31:0] Data_in;
    input [25:0] inst_field;
    input Jal;
    input RegDst;
    input RegWrite;
    input rst;
   output [31:0] ALU_out;
   output [31:0] Data_out;
   output overflow;
   output [31:0] PC_out;
   output zero;
   
   wire [31:0] branch_pc;
   wire [31:0] imm_32;
   wire NO;
   wire [31:0] pc_back;
   wire [31:0] pc_4;
   wire [31:0] rdata_A;
   wire V5;
   wire [31:0] XLXN_3;
   wire [31:0] XLXN_5;
   wire [4:0] XLXN_113;
   wire [4:0] XLXN_114;
   wire [31:0] XLXN_121;
   wire [31:0] ALU_out_DUMMY;
   wire [31:0] Data_out_DUMMY;
   wire [31:0] PC_out_DUMMY;
   
   assign ALU_out[31:0] = ALU_out_DUMMY[31:0];
   assign Data_out[31:0] = Data_out_DUMMY[31:0];
   assign PC_out[31:0] = PC_out_DUMMY[31:0];
   add_32  ADD_Branch (.a(pc_4[31:0]), 
                      .b({imm_32[29:0], NO, NO}), 
                      .c(branch_pc[31:0]));
   add_32  ADD_PC_4 (.a(PC_out_DUMMY[31:0]), 
                    .b({NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, 
         NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, V5, NO, 
         NO}), 
                    .c(pc_4[31:0]));
   Ext_32  Ext (.imm_16(inst_field[15:0]), 
               .imm_32(imm_32[31:0]));
   MUX2T1_5_MUSER_Data_path  MUXD1 (.I0(inst_field[20:16]), 
                                   .I1({V5, V5, V5, V5, V5}), 
                                   .s(Jal), 
                                   .o(XLXN_113[4:0]));
   REG32  PC (.CE(V5), 
             .clk(clk), 
             .D(pc_back[31:0]), 
             .rst(rst), 
             .Q(PC_out_DUMMY[31:0]));
   Regs  U2_2 (.clk(clk), 
              .L_S(RegWrite), 
              .rst(rst), 
              .R_addr_A(inst_field[25:21]), 
              .R_addr_B(inst_field[20:16]), 
              .Wt_addr(XLXN_114[4:0]), 
              .wt_data(XLXN_5[31:0]), 
              .rdata_A(rdata_A[31:0]), 
              .rdata_B(Data_out_DUMMY[31:0]));
   VCC  XLXI_9 (.P(V5));
   GND  XLXI_11 (.G(NO));
   MUX2T1_5_MUSER_Data_path  XLXI_45 (.I0(XLXN_113[4:0]), 
                                     .I1(inst_field[15:11]), 
                                     .s(RegDst), 
                                     .o(XLXN_114[4:0]));
   MUX4T1_32  XLXI_47 (.I0(ALU_out_DUMMY[31:0]), 
                      .I1(Data_in[31:0]), 
                      .I2({inst_field[15:0], NO, NO, NO, NO, NO, NO, NO, NO, 
         NO, NO, NO, NO, NO, NO, NO, NO}), 
                      .I3(pc_4[31:0]), 
                      .s(DatatoReg[1:0]), 
                      .o(XLXN_5[31:0]));
   MUX4T1_32  XLXI_49 (.I0(pc_4[31:0]), 
                      .I1(branch_pc[31:0]), 
                      .I2({pc_4[31:28], inst_field[25:0], NO, NO}), 
                      .I3(rdata_A[31:0]), 
                      .s(Branch[1:0]), 
                      .o(pc_back[31:0]));
   ALU  XLXI_51 (.A(XLXN_121[31:0]), 
                .ALU_operation(ALU_Control[2:0]), 
                .B(XLXN_3[31:0]), 
                .overflow(overflow), 
                .res(ALU_out_DUMMY[31:0]), 
                .zero(zero));
   MUX2T1_32  XLXI_53 (.I0(Data_out_DUMMY[31:0]), 
                      .I1(imm_32[31:0]), 
                      .s(ALUSrc_B), 
                      .o(XLXN_3[31:0]));
   MUX2T1_32  XLXI_54 (.I0(rdata_A[31:0]), 
                      .I1({NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, 
         NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, NO, 
         inst_field[10:6]}), 
                      .s(ALUSrc_A), 
                      .o(XLXN_121[31:0]));
endmodule
